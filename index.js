// Task 1
// Есть некоторая строка (;), что будет, если мы возьмем str[0]
// const str = 'fgfggg'
// console.log(
// 	str[0]
// )

// Task 2
// Реализуйте необходимый код, что бы выражение (2).plus(3).minus(1) сработало и вернуло 4


// Task 3
// Реализуйте функцию, которая принимает следующие аргументы (строки) , и возвращает строку '1*b*1c'


// Task 4
// Напишите функцию которая найдет сумму всех вершин в структуре данны типа tree
// Рекурсивно
// В цикле

// const tree = {
// 	valueNode: 3,
// 	next: [
// 		{
// 			valueNode: 1,
// 			next: null
// 		},
// 		{
// 			valueNode: 3,
// 			next: null
// 		},
// 		{
// 			valueNode: 2,
// 			next: null
// 		},
// 		{
// 			valueNode: 2,
// 			next: [
// 				{
// 					valueNode: 1,
// 					next: null
// 				},
// 				{
// 					valueNode: 5,
// 					next: null
// 				}
// 			]
// 		}
// 	]
// };



// Task 5
// исправить код, что бы работал правильно

// for (var i = 0; i < 10; i++) {
//     setTimeout(() => {
//         console.log(i)
//     }, 1000)
// }

// Task 6
// Реализуйте функцию Foo, что бы все корректно работало

// function Book(name, author) {
// 	this.name = name;
// 	this.author = author;
// 	return this;
// }


// const book = Foo(Book, 'js', 'petr');

// console.log(book.name); //js

// Task 7
// Реализовать функцию f: f(2, 3) -> 5, при вызове f(2)(3), тоже вернет 5


// console.log(
// 	f(2, 3)// -> 5
// )
// console.log(
// 	f(2)(3) // -> 5
// )


// Task 8
// Реализовать функцию f: f(1)(2)(3)() -> 6, f()(3)(1)(5)() -> 9,


// Task 9
// Реализовать функции seven, plus, one, five, minus, two так, что бы следующие вызовы работали


// console.log(
// 	seven(plus(one()))
// ) // -> 8.
// console.log(
// 	seven(minus(two())) //-> 5
// )



// Task 10
// Необходимо написать функцию, принимающую в аргументах массив целых чисел и возвращающую новый массив, состоящий только из уникальных значений первого массива.


// console.log(
// 	f([2, 2, 3, 4, 4, 6])
// ) // -> 1, 2, 3, 4, 6

// Task 11
// Написать функцию, принимающую аргументом массив чисел и возвращающую новый массив, состоящий из удвоенных значений первого.
// f([1, 2, null, 7, 8, null, 3]); // => [2, 4, 14, 16, 6]


// Task 12
// Необходимо написать функцию, возвращающую значения всех вершин дерева
// getTreeValues(tree); // => [1, 2, 3, 4, 5, 6, 7]

// const tree2 = {
// 	value: 1,
// 	children: [
// 		{
// 			value: 2,
// 			children: [
// 				{ value: 4 },
// 				{ value: 5 },
// 			]
// 		},
// 		{
// 			value: 3,
// 			children: [
// 				{ value: 6 },
// 				{ value: 7 },
// 			]
// 		}
// 	]
// };


// Task 13
// Надо реализовать «бомбу» (в виде функции-конструктора), которая получает на входе время, через которое взорвется и
// некоторый «звук взрыва» (строку, которую вернет через заданное время).


// Task 14
// Необходимо реализовать функцию, принимающую в аргументах строку, состоящую из букв и вернуть новую строку,
// в которой повторяющиеся буквы заменены количеством повторений.
// rle('AVVVBBBVVXDHJFFFFDDDDDDHAAAAJJJDDSLSSSDDDD'); // => 'AV3B3V2XDHJF4D6HA4J3D2SLS3D4'



// Task 15
// Реализуйте функцию isSorted(), которая возвращает true или false в зависимости о того, отсортирован ли переданный ей числовой массив.


// Task 16
// Реализуйте функцию missing(), которая принимает неотсортированный массив уникальных чисел (то есть, числа в нём не повторяются)
// от 1 до некоего числа n, и возвращает число, отсутствующее в последовательности. Там может быть либо одно отсутствующее число,
// либо их может не быть вовсе.
// missing([])                         // undefined
// missing([1, 4, 3])                  // 2
// missing([2, 3, 4])                  // 1
// missing([5, 1, 4, 2])               // 3
// missing([1, 2, 3, 4])               // undefined

/*
Реализуйте функцию missing(), которая принимает неотсортированный массив уникальных чисел (то есть, числа в нём не повторяются) от 1 до некоего числа n, и возвращает число, отсутствующее в последовательности. Там может быть либо одно отсутствующее число, либо их может не быть вовсе.
Способны ли вы добиться того, чтобы функция решала задачу за время O(N)?

Формула суммы арифмитической прогрессии: (n*n + n)/2 === sum(arr)


// Task 17
// Реализуйте класс LinkedList, не используя встроенные массивы JavaScript ( [] ). Ваш LinkedList должен поддерживать лишь 2 метода: add() и has().
// class LinkedList {...}
// let list = new LinkedList(1, 2, 3)
// list.add(4)                           // undefined
// list.add(5)                           // undefined
// list.has(1)                           // true
// list.has(4)                           // true
// list.has(6)                           // false



// Task 18
// Что выведет консоль?

// Promise
// 	.resolve()
// 	.then(() => console.log(1))
// 	.then(() => console.log(2))
// 	.then(() => console.log(3));

Promise
    .resolve()
    .then(() => console.log(4))
    .then(() => console.log(5))
    .then(() => console.log(6))
